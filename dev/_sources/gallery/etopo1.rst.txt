.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_gallery_etopo1.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_etopo1.py:


ETOPO1 Earth Relief
===================

ETOPO1 is a 1 arc-minute global relief model of Earth's surface that integrates land
topography and ocean bathymetry [AmanteEakins2009]_. It's available in two versions:
"Ice Surface" (top of Antarctic and Greenland ice sheets) and "Bedrock" (base of the ice
sheets). The grids are loaded into :class:`xarray.Dataset` which can be used to plot
and make computations.




.. image:: /gallery/images/sphx_glr_etopo1_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Entire dataset:

     <xarray.Dataset>
    Dimensions:    (latitude: 10801, longitude: 21601)
    Coordinates:
      * longitude  (longitude) float64 -180.0 -180.0 -180.0 ... 180.0 180.0 180.0
      * latitude   (latitude) float64 -90.0 -89.98 -89.97 ... 89.97 89.98 90.0
    Data variables:
        ice        (latitude, longitude) float64 ...
        bedrock    (latitude, longitude) float64 ...
    Attributes:
        Conventions:  COARDS/CF-1.0
        title:        ETOPO1 Ice Surface relief [meters]
        GMT_version:  4.4.0
        node_offset:  0

    Iceland subsection:

     <xarray.Dataset>
    Dimensions:    (latitude: 1500, longitude: 2401)
    Coordinates:
      * longitude  (longitude) float64 -50.0 -49.98 -49.97 ... -10.03 -10.02 -10.0
      * latitude   (latitude) float64 55.0 55.02 55.03 55.05 ... 79.95 79.97 79.98
    Data variables:
        ice        (latitude, longitude) float64 ...
        bedrock    (latitude, longitude) float64 ...
    Attributes:
        Conventions:  COARDS/CF-1.0
        title:        ETOPO1 Ice Surface relief [meters]
        GMT_version:  4.4.0
        node_offset:  0




|


.. code-block:: python

    import rockhound as rh
    import matplotlib.pyplot as plt
    import cartopy.crs as ccrs

    # Load both the ice surface and bedrock grids and merge them into a single Dataset
    grid = rh.fetch_etopo1(version="ice")
    grid = grid.merge(rh.fetch_etopo1(version="bedrock"))
    print("Entire dataset:\n\n", grid)

    # Select a subset of this large grid that corresponds to Iceland and Greenland
    iceland = grid.sel(latitude=slice(55, 80), longitude=slice(-50, -10))
    print("\nIceland subsection:\n\n", iceland)

    # Make maps of both versions using an Albers Equal Area projection
    proj = ccrs.AlbersEqualArea(central_longitude=-30, central_latitude=67.5)
    trans = ccrs.PlateCarree()

    # Setup some common arguments for the colorbar and pseudo-color plot
    cbar_kwargs = dict(pad=0, orientation="horizontal")
    pcolor_args = dict(cmap="terrain", add_colorbar=False, transform=ccrs.PlateCarree())

    # Draw the maps
    fig, axes = plt.subplots(1, 2, figsize=(9, 5), subplot_kw=dict(projection=proj))
    fig.suptitle("ETOPO1 Earth Relief of Iceland and Greenland")
    ax = axes[0]
    tmp = iceland.ice.plot.pcolormesh(ax=ax, **pcolor_args)
    plt.colorbar(tmp, ax=ax, **cbar_kwargs).set_label("[meters]")
    ax.gridlines()
    ax.set_title("Ice Surface")
    ax = axes[1]
    tmp = iceland.bedrock.plot.pcolormesh(ax=ax, **pcolor_args)
    plt.colorbar(tmp, ax=ax, **cbar_kwargs).set_label("[meters]")
    ax.gridlines()
    ax.set_title("Bedrock")
    plt.tight_layout()
    plt.show()

**Total running time of the script:** ( 0 minutes  50.665 seconds)


.. _sphx_glr_download_gallery_etopo1.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: etopo1.py <etopo1.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: etopo1.ipynb <etopo1.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
